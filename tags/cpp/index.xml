<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CPP on JiaLog</title>
    <link>http://localhost:1313/tags/cpp/</link>
    <description>Recent content in CPP on JiaLog</description>
    <image>
      <title>JiaLog</title>
      <url>http://localhost:1313/images/papermod-cover.png</url>
      <link>http://localhost:1313/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.144.2</generator>
    <language>en</language>
    <copyright>JiaLog 豫ICP备2024077894号-1 苏公网安备32031202000962号 32031202000962</copyright>
    <lastBuildDate>Tue, 25 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lab1 Xv6 &amp;&amp; system calls</title>
      <link>http://localhost:1313/posts/os/lab1-xv6--system-calls/</link>
      <pubDate>Tue, 25 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/os/lab1-xv6--system-calls/</guid>
      <description>&lt;h2 id=&#34;using-gdb&#34;&gt;Using gdb&lt;/h2&gt;
&lt;p&gt;平时我们用的调试工具其实都是图形化后的gdb，使用起来非常的方便，但是熟悉原生的gdb会使我们的效率进一步提升。我认为学习好用gdb调试是一项非常重要的技能。&lt;/p&gt;
&lt;h3 id=&#34;编译并启动&#34;&gt;编译并启动&lt;/h3&gt;
&lt;p&gt;==make qemu-gdb==&lt;/p&gt;
&lt;p&gt;使用上述命令&lt;strong&gt;编译项目&lt;/strong&gt;并且直接以&lt;strong&gt;调试&lt;/strong&gt;模式启动。但是这个项目启动的其实是在本地的一个远程gdb，通过另一个窗口进行调试。
&lt;img alt=&#34;PixPin_2025-02-25_13-54-10.png|550&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/PixPin_2025-02-25_13-54-10.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;下面有几个关于系统调用的小问题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Looking at the backtrace output, which function called syscall?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;PixPin_2025-02-25_16-13-11.png|550&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/PixPin_2025-02-25_16-13-11.png&#34;&gt;
&lt;img alt=&#34;PixPin_2025-02-25_16-19-46.png|550&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/PixPin_2025-02-25_16-19-46.png&#34;&gt;
显然是usertrap（）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is the value of p-&amp;gt;trapframe-&amp;gt;a7 and what does that value represent? (Hint: look user/initcode.S, the first user program xv6 starts.)&lt;/strong&gt;
&lt;img alt=&#34;PixPin_2025-02-25_16-26-31.png|550&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/PixPin_2025-02-25_16-26-31.png&#34;&gt;
通过提示找到trapframe的地址，在kernel/proc.h中找到a7寄存器对应的偏移地址。
&lt;img alt=&#34;PixPin_2025-02-25_16-28-03.png|550&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/PixPin_2025-02-25_16-28-03.png&#34;&gt;
把168换算成16进制
&lt;img alt=&#34;PixPin_2025-02-25_16-29-13.png|550&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/PixPin_2025-02-25_16-29-13.png&#34;&gt;
尝试着打印&lt;strong&gt;0x87f560a8&lt;/strong&gt;
&lt;img alt=&#34;PixPin_2025-02-25_16-30-11.png|550&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/PixPin_2025-02-25_16-30-11.png&#34;&gt;
这个就是寄存器a7的值。其代表的具体含义通过所给的提示到对应文件中查找之后也是十分的明了。
&lt;img alt=&#34;PixPin_2025-02-25_16-32-21.png|550&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/PixPin_2025-02-25_16-32-21.png&#34;&gt;
应该就是系统的调用号。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What was the previous mode that the CPU was in?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;PixPin_2025-02-25_16-43-14.png|550&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/PixPin_2025-02-25_16-43-14.png&#34;&gt;
spp位表示其在什么状态。 通过图示得出，spp在二进制的第8bit.
&lt;img alt=&#34;PixPin_2025-02-25_17-10-18.png|550&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/PixPin_2025-02-25_17-10-18.png&#34;&gt;
由图可知8bit是0，所以之前是用户状态 。
&lt;img alt=&#34;PixPin_2025-02-25_17-26-23.png|550&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/PixPin_2025-02-25_17-26-23.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;PixPin_2025-02-25_17-26-05.png|550&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/PixPin_2025-02-25_17-26-05.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;system-call-tracing&#34;&gt;System call tracing&lt;/h2&gt;
&lt;h2 id=&#34;attack-xv6&#34;&gt;Attack xv6&lt;/h2&gt;
&lt;p&gt;这个task主要是利用xv6故意留下的bug然后获取到销毁内存但是保留了脏页的数据。然后通过一些比较hack的手段把字段给找出来。&lt;/p&gt;
&lt;h3 id=&#34;page组成&#34;&gt;page组成&lt;/h3&gt;
&lt;p&gt;&lt;img alt=&#34;PixPin_2025-02-28_20-58-24.png|550&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/PixPin_2025-02-28_20-58-24.png&#34;&gt;
上图是一个简化的逻辑页表，下一个实验也会用到，这里理顺一下逻辑有利于分析代码的组成。
&lt;img alt=&#34;PixPin_2025-02-28_21-01-20.png|550&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/PixPin_2025-02-28_21-01-20.png&#34;&gt;
上图是地址转化的细节。
页表项（PTE）包含标志位，告诉硬件应该如何使用这些虚拟地址。&lt;img alt=&#34;PixPin_2025-03-02_10-35-10.png|550&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/PixPin_2025-03-02_10-35-10.png&#34;&gt;
这些相关位的定义都在(kernel/riscv.h)中&lt;/p&gt;</description>
    </item>
    <item>
      <title>xv6-环境搭建</title>
      <link>http://localhost:1313/posts/os/xv6%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%A0%81%E5%AF%BC%E8%AF%BB/</link>
      <pubDate>Sat, 04 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/os/xv6%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%A0%81%E5%AF%BC%E8%AF%BB/</guid>
      <description>&lt;h2 id=&#34;xv6-启动&#34;&gt;xv6 启动！&lt;/h2&gt;
&lt;p&gt;万事开头难！
&lt;img alt=&#34;PixPin_2024-12-27_21-38-12.png|675&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/PixPin_2024-12-27_21-38-12.png&#34;&gt;
这是我所用的开发环境，Kubuntu+VsCode，这样的环境对我来说是比较舒服的，也是比较好用的在实际使用的过程中我没感觉ubuntu和kubuntu有任何的区别，反正我也不在乎桌面，我只在终端里用。
用debian系的有一个好处就是软件生态真的很不错，可别是最新的，版本什么的直接用apt都能直接获得，虽然不想archwiki那样完善，但是Google一下基本上问题也都能解决。&lt;/p&gt;
&lt;h3 id=&#34;一个很有意思的工具-bear&#34;&gt;一个很有意思的工具 bear&lt;/h3&gt;
&lt;p&gt;我相信有很多同学在用vscode看项目代码的时候会发现，全是红线，项目变得根本就不可读，无法跳转，更无法获得依赖关系，只能把vscode当一个能用鼠标的阉割版的vim用。我们可以获取编译的命令行，然后让vscode知道然后把这些报错给消掉
&lt;strong&gt;1.make -nB&lt;/strong&gt;
当然可以手动获取编译选项，但是这样也是比较复杂的而且十分的低效
&lt;strong&gt;2.bear&lt;/strong&gt;
善于使用工具，君子性非异也，善假于物也。用bear把编译过程包起来就能自动获取编译选项。&lt;/p&gt;
&lt;h3 id=&#34;如何在vscode中debug&#34;&gt;如何在vscode中debug&lt;/h3&gt;
&lt;p&gt;==官方非GUI界面==&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;make&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;qemu&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gdb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后系统会在本地启动一个gdb，另起一个终端使用gdb连接。
&lt;img alt=&#34;PixPin_2025-01-04_16-46-16.png600&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/PixPin_2025-01-04_16-46-16.png&#34;&gt;
到这就说明gdb启动成功了，但是后面会有一个小小的坑。&lt;/p&gt;
&lt;p&gt;Type &amp;ldquo;apropos word&amp;rdquo; to search for commands related to &amp;ldquo;word&amp;rdquo;. warning: File &amp;ldquo;/home/learn_code/xv6-labs-2024/.gdbinit&amp;rdquo; auto-loading has been declined by your `auto-load safe-path&amp;rsquo; set to &amp;ldquo;$debugdir:$datadir/auto-load:/home/learn_code/xv6-riscv/.gdbinit&amp;rdquo;. To enable execution of this file add add-auto-load-safe-path /home/learn_code/xv6-labs-2024/.gdbinit line to your configuration file &amp;ldquo;/root/.config/gdb/gdbinit&amp;rdquo;. To completely disable this security protection add set auto-load safe-path / line to your configuration file &amp;ldquo;/root/.config/gdb/gdbinit&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Effective Modern C&#43;&#43; 笔记</title>
      <link>http://localhost:1313/posts/c&#43;&#43;/effective-modern-c&#43;&#43;/</link>
      <pubDate>Sat, 09 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;/effective-modern-c&#43;&#43;/</guid>
      <description>&lt;h2 id=&#34;auto&#34;&gt;auto&lt;/h2&gt;
&lt;p&gt;在概念上auto已经极简了，但是实际上仍然要微妙许多。它可以节约声明类型，也可以避免许多手动类型的正确性和声明问题。但是从结果的角度来说，尽管auto很努力在做事了，但是仍然可能是错误的。如果出现这种情况我们要知道如何去引导auto让他成为正确的类型，因为退回使用手动声明类型仍然是下下策。&lt;/p&gt;
&lt;p&gt;接下来的内容会涵盖&lt;code&gt;auto&lt;/code&gt;的所有细节&lt;/p&gt;
&lt;h3 id=&#34;item-5-prefer-auto-to-explicit-type-declarations&#34;&gt;Item 5: Prefer auto to explicit type declarations.&lt;/h3&gt;
&lt;p&gt;不仅可以避免出现为初始化的变量，避免啰嗦又繁杂的类型声明，能直接持有闭包，还可以避免一些因为“类型捷径”出现的问题。
eg1.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;image.png|675&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/20231210204514.png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;有一些程序员会对类型发生误判，到时用范围较小的类型在32位机器上能够运行但是在64位机器上发生了改变，导致程序在移植的时候出现问题。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;eg2.
&lt;img alt=&#34;image.png|600&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/20231210205424.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;上述代码看起来没什么问题，但是当实际运行之后并没有对哈希表m进行操作。原因在于哈希表中的kay值是const类型的，手动声明的类型不一样的话编译器会进行一个神奇的操作，它会讲m中的内容复制成为临时变量将key的类型改为和声明一致的，再将p绑定到临时变量上。&lt;/p&gt;
&lt;h4 id=&#34;summary&#34;&gt;Summary&lt;/h4&gt;
&lt;p&gt;auto说到底只是一个可选项罢了，不是必选项，如果你觉得你的项目使用显式的声明能够使得项目变得更加的可读和高效，当然可以继续使用。但是c++引入auto并不是一个多新鲜的东西，只是一个在其他语言中被称为“类型推导”的东西罢了。在其他的静态类型语言中类型推导都或多或少存在。而且动态语言还为类型推导积累了大量的经验。而且此类技术并不会于大型的工程项目产生冲突。&lt;/p&gt;
&lt;p&gt;一些人觉得用完auto之后会让变量的类型变得不是一眼可以识别，但是这个问题随着ide的优化和适配已经被解决的相当完美了。&lt;/p&gt;
&lt;p&gt;事实上手动声明变量经常是在画蛇添足，无论是正确率还是效率上。&lt;/p&gt;
&lt;h3 id=&#34;item-6-use-the-explicitly-typed-initializer-idiom-when-auto-deduces-undesired-types&#34;&gt;Item 6: Use the explicitly typed initializer idiom when auto deduces undesired types.&lt;/h3&gt;
&lt;p&gt;纵使auto有万般好，但是auto也会出现推断的类型和你心目中期待的不一样的情况（当然也不完全是auto错了哦😀）
下面举一个auto推断不符合预期的例子。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;image.png|650&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/20231210214843.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;上述声明了一个返回vector&amp;lt; bool &amp;gt;类型的函数，使用了auto之后虽然仍然能够直接进行编译和运行但是结果却不是所想要的。&lt;/p&gt;
&lt;p&gt;而发生这样错误的原因是，在c++的设计当中回避了bit的引用所以返回的不是bool&amp;amp;，实际上c++中设计了一个&lt;strong&gt;代理类&lt;/strong&gt;来完成向bool的转换操作，这就不展开细说了，但是代理类并不少见，我们经常使用的两个智能指针就是一种代理类。&lt;/p&gt;
&lt;p&gt;代理类的设计在使用的时候尽量少的对程序员暴露内部细节，这些代理类的使用往往会在文档中标识出来，如果在文档中没有体现的话，也避免不了在头文件中漏出一些破绽，最不济在debug的时候可能也会发觉是使用了代理类。&lt;/p&gt;
&lt;p&gt;但是这些都不重要了，现在重要的事怎么把auto引导到正确的道路上🙃。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;image.png|700&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/20231210220544.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;就是使用一个强制的类型转换，让它去到该去的位置，虽然看起来有点滑稽，给人一种头痛医脚的感觉🤣。虽然在这些时候你也可以放弃使用auto，但是在这个踩坑的过程中不是也收获了新的知识么?😁&lt;/p&gt;
&lt;p&gt;总之记住以下两点
&lt;img alt=&#34;image.png|700&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/20231210220919.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隐形的代理类可能会让auto推断出错误的类型。&lt;/li&gt;
&lt;li&gt;显式的类型转换可以让auto走向正确道路。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;moving-to-modern-c&#34;&gt;Moving to Modern C++&lt;/h2&gt;
&lt;p&gt;接下来这一章会详细介绍现代c++的一些细节特性。我自己会记录几个我认为比较实用的。并不是全部。&lt;/p&gt;
&lt;h3 id=&#34;item-8-prefer-nullptr-to-0-and-null&#34;&gt;Item 8: Prefer nullptr to 0 and NULL.&lt;/h3&gt;
&lt;p&gt;非常显然的是0的类型是&lt;strong&gt;int&lt;/strong&gt;，不是一个指针，但是在一个本应该出现指针类型的地方出现了0，编译器也会勉强吧0解释为空指针，但这毕竟是不得已而为之的行为🙉， 总之0是int，不是指针。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;nullptr’s advantage is that it doesn’t have an integral type. To be honest, it doesn’t have a pointer type, either, but you can think of it as a pointer of all types. nullptr’s actual type is std::nullptr_t, and, in a wonderfully circular definition, std::nullptr_t is defined to be the type of nullptr. The type std::nullptr_t implicitly converts to all raw pointer types, and that’s what makes nullptr act as if it were a pointer of all types.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
