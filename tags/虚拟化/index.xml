<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>虚拟化 on JiaLog</title>
    <link>https://jialog.top/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/</link>
    <description>Recent content in 虚拟化 on JiaLog</description>
    <image>
      <title>JiaLog</title>
      <url>https://jialog.top/images/papermod-cover.png</url>
      <link>https://jialog.top/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.144.2</generator>
    <language>en</language>
    <copyright>JiaLog 豫ICP备2024077894号-1 苏公网安备32031202000962号 32031202000962</copyright>
    <lastBuildDate>Sun, 02 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://jialog.top/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>虚拟化--进程管理API：fork, execve, exit</title>
      <link>https://jialog.top/posts/os/%E8%99%9A%E6%8B%9F%E5%8C%96--%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86apifork-execve-exit/</link>
      <pubDate>Sun, 02 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://jialog.top/posts/os/%E8%99%9A%E6%8B%9F%E5%8C%96--%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86apifork-execve-exit/</guid>
      <description>&lt;h1 id=&#34;操作系统上的进程&#34;&gt;操作系统上的进程&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;背景回顾&lt;/strong&gt;：有关状态机、并发和中断的讨论给我们真正理解操作系统奠定了基础，现在我们正式进入操作系统和应用程序的 “边界” 了。让我们把视角回到单线程应用程序，即 “执行计算指令和系统调用指令的状态机”，开始对操作系统和进程的讨论。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本讲内容&lt;/strong&gt;：操作系统上的进程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作系统上的第一个进程&lt;/li&gt;
&lt;li&gt;UNIX/Linux 进程管理 API: fork, execve, exit&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fork&#34;&gt;fork（）&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&#34;PixPin_2025-02-03_14-37-19.png600&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/PixPin_2025-02-03_14-37-19.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;PixPin_2025-02-03_14-51-04.png600&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/PixPin_2025-02-03_14-51-04.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;理解 fork()&lt;/strong&gt;: fork() 会完整复制状态机；新创建的状态机返回值为 0，执行 fork() 的进程会返回子进程的进程号。同时，操作系统中的进程是并行执行的。程序的精确行为并不显然——model checker 可以帮助我们理解它。&lt;/p&gt;
&lt;p&gt;在这个例子中，我们还发现执行 &lt;code&gt;./a.out&lt;/code&gt; 打印的行数和 &lt;code&gt;./a.out | wc -l&lt;/code&gt; 得到的行数不同。根据 “机器永远是对的” 的原则，我们可以通过提出假设 (libc 缓冲区影响) 求证、对比 strace 系统调用序列等方式，最终理解背后的原因。标准输入输出的缓冲控制可以通过 setbuf(3) 和 stdbuf(1) 实现。&lt;/p&gt;
&lt;h2 id=&#34;execve&#34;&gt;execve（）&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&#34;PixPin_2025-02-03_14-54-18.png|525&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/PixPin_2025-02-03_14-54-18.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;PixPin_2025-02-03_14-55-00.png|550&#34; loading=&#34;lazy&#34; src=&#34;https://weijiale.oss-cn-shanghai.aliyuncs.com/picgo/PixPin_2025-02-03_14-55-00.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;exit&#34;&gt;exit（）&lt;/h2&gt;</description>
    </item>
  </channel>
</rss>
